/*
 * generated by Xtext 2.36.0
 */
package tdt4250.matrixgame.serializer;

import com.google.inject.Inject;
import java.util.Set;
import no.ntnu.tdt4250.matrixgame.game.GameLogic;
import no.ntnu.tdt4250.matrixgame.game.GamePackage;
import no.ntnu.tdt4250.matrixgame.game.Map;
import no.ntnu.tdt4250.matrixgame.game.Player;
import no.ntnu.tdt4250.matrixgame.game.State;
import no.ntnu.tdt4250.matrixgame.game.Tile;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import tdt4250.matrixgame.services.MatrixGameGrammarAccess;

@SuppressWarnings("all")
public class MatrixGameSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MatrixGameGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == GamePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case GamePackage.ACTION:
				sequence_Action(context, (no.ntnu.tdt4250.matrixgame.game.Action) semanticObject); 
				return; 
			case GamePackage.GAME_LOGIC:
				sequence_GameLogic(context, (GameLogic) semanticObject); 
				return; 
			case GamePackage.MAP:
				sequence_Map(context, (Map) semanticObject); 
				return; 
			case GamePackage.PLAYER:
				sequence_Player(context, (Player) semanticObject); 
				return; 
			case GamePackage.STATE:
				sequence_State(context, (State) semanticObject); 
				return; 
			case GamePackage.TILE:
				sequence_Tile(context, (Tile) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Action returns Action
	 *
	 * Constraint:
	 *     (name=EString actionType=ActionType?)
	 * </pre>
	 */
	protected void sequence_Action(ISerializationContext context, no.ntnu.tdt4250.matrixgame.game.Action semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     GameLogic returns GameLogic
	 *
	 * Constraint:
	 *     (gameName=EString? player=Player map=Map (actions_played+=Action actions_played+=Action*)? (has_state+=State has_state+=State*)?)
	 * </pre>
	 */
	protected void sequence_GameLogic(ISerializationContext context, GameLogic semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Map returns Map
	 *
	 * Constraint:
	 *     (
	 *         amountOfTiles=EInt? 
	 *         mapSizeX=EInt 
	 *         mapSizeY=EInt 
	 *         mapName=EString? 
	 *         tile+=Tile 
	 *         tile+=Tile*
	 *     )
	 * </pre>
	 */
	protected void sequence_Map(ISerializationContext context, Map semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Player returns Player
	 *
	 * Constraint:
	 *     (name=EString score=EInt? (takes_action+=[Action|EString] takes_action+=[Action|EString]*)?)
	 * </pre>
	 */
	protected void sequence_Player(ISerializationContext context, Player semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     State returns State
	 *
	 * Constraint:
	 *     (flagsPlaced?='flagsPlaced'? isOver?='isOver'? name=EString turnsTaken=EInt? tile=[Tile|EString])
	 * </pre>
	 */
	protected void sequence_State(ISerializationContext context, State semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Tile returns Tile
	 *
	 * Constraint:
	 *     (
	 *         isAccessible?='isAccessible' 
	 *         tilePlace=EString 
	 *         tileType=TileType 
	 *         Color=EString? 
	 *         xCoordinate=EInt 
	 *         yCoordinate=EInt
	 *     )
	 * </pre>
	 */
	protected void sequence_Tile(ISerializationContext context, Tile semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
