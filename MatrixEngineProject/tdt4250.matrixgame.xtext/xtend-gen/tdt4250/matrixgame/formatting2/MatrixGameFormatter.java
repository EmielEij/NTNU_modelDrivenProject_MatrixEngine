/**
 * generated by Xtext 2.36.0
 */
package tdt4250.matrixgame.formatting2;

import com.google.inject.Inject;
import java.util.Arrays;
import no.ntnu.tdt4250.matrixgame.game.Action;
import no.ntnu.tdt4250.matrixgame.game.GameLogic;
import no.ntnu.tdt4250.matrixgame.game.Map;
import no.ntnu.tdt4250.matrixgame.game.Player;
import no.ntnu.tdt4250.matrixgame.game.State;
import no.ntnu.tdt4250.matrixgame.game.Tile;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.XbaseGenerated;
import tdt4250.matrixgame.services.MatrixGameGrammarAccess;

@SuppressWarnings("all")
public class MatrixGameFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private MatrixGameGrammarAccess _matrixGameGrammarAccess;

  protected void _format(final GameLogic gameLogic, @Extension final IFormattableDocument document) {
    document.<Player>format(gameLogic.getPlayer());
    document.<Map>format(gameLogic.getMap());
    EList<Action> _actions_played = gameLogic.getActions_played();
    for (final Action action : _actions_played) {
      document.<Action>format(action);
    }
    EList<State> _has_state = gameLogic.getHas_state();
    for (final State state : _has_state) {
      document.<State>format(state);
    }
  }

  protected void _format(final Map map, @Extension final IFormattableDocument document) {
    EList<Tile> _tile = map.getTile();
    for (final Tile tile : _tile) {
      document.<Tile>format(tile);
    }
  }

  @XbaseGenerated
  public void format(final Object gameLogic, final IFormattableDocument document) {
    if (gameLogic instanceof XtextResource) {
      _format((XtextResource)gameLogic, document);
      return;
    } else if (gameLogic instanceof GameLogic) {
      _format((GameLogic)gameLogic, document);
      return;
    } else if (gameLogic instanceof Map) {
      _format((Map)gameLogic, document);
      return;
    } else if (gameLogic instanceof EObject) {
      _format((EObject)gameLogic, document);
      return;
    } else if (gameLogic == null) {
      _format((Void)null, document);
      return;
    } else if (gameLogic != null) {
      _format(gameLogic, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(gameLogic, document).toString());
    }
  }
}
