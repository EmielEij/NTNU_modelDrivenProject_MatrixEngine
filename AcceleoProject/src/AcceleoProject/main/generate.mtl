[comment encoding = UTF-8/]
[module generate('http://www.ntnu.no/tdt4250/MatrixGame')]

[template public generateGameLogic(aGameLogic : GameLogic)]
    [comment @main/]
	[file ('/Users/klarag/runtime-EclipseApplication/AcceleoProject/src' + aGameLogic.gameName + 'GameLogic.java', false, 'UTF-8')]
    [if not(aGameLogic.gameName = null)]
        
            // Generated GameLogic class for [aGameLogic.gameName/]
            public class [aGameLogic.gameName/]GameLogic {
            
                private Grid grid; [comment initialize depending on Game logic /]
                private char playerX = '[aGameLogic.playerX/]';
                private char playerO = '[aGameLogic.playerO/]';
                private char currentPlayer = '[aGameLogic.currentPlayer/]';
                private int mapLength = [aGameLogic.mapLength/];
            
                
                public [aGameLogic.gameName/]GameLogic() {
                    // Constructor code here
                }
            
                
                public boolean isGameOver() {
                    return isFull() || hasWinner();
                }
            
                public boolean isFull() {
					for ([aGameLogic.grid.row/] : [aGameLogic.grid/]){
	                   for ([aGameLogic.grid.row.cell/] : [aGameLogic.grid.row/]){
							if(not([aGameLogic.grid.row.cell/] = null)){
								return false;
							}
						}
	                }
					return true; 
            	}

				public boolean hasWinner(){

				}

                public void makeMove(int row, int coll){

				}
            }
        
    
    [else]
        [comment] Game name is null, skipping file generation [/comment]
    [/if]
	[/file]
[/template]
[template public generateGrid(grid : Grid)]
	[file ('/Users/klarag/runtime-EclipseApplication/AcceleoProject/src' + grid.map + 'GameLogic.java', false, 'UTF-8')]
		public class [grid.map/]Grid {
		
		  private final char[''/][''/] grid;
		  private final int rows;
		  private final int cols;
		
		  public Grid(int rows, int cols) {
		    this.rows = rows;
		    this.cols = cols;
		    this.grid = new char[grid.row/][grid.row.cell/];
		
		    // Initialize grid with empty spaces
		    for (int i = 0; i < rows; i++) {
		      for (int j = 0; j < cols; j++) {
		        grid['i'/]['j'/] = ' ';
		      }
		    }
		  }'
		
		  public char getCell(int row, int col) {
		    return grid[grid.row/][grid.row.cell/];
		  }
		
		  public void setCell(int row, int col, char symbol) {
		    grid[grid.row/][grid.row.cell/]; = symbol;
		  }
		
		  public void printGrid() {
		    for (int i = 0; i < rows; i++) {
		      for (int j = 0; j < cols; j++) {
		        System.out.print(grid['i'/]['j'/]);
		        if (j < cols - 1) System.out.print("|");
		      }
		      System.out.println();
		      if (i < rows - 1) System.out.println("-".repeat(cols * 2 - 1));
		    }
		  }
		
		  public boolean isFull() {
		    for (int i = 0; i < rows; i++) {
		      for (int j = 0; j < cols; j++) {
		        if (grid['i'/]['j'/] == ' ') return false;
		      }
		    }
		    return true;
		  }
		}

            
   	[/file]
[/template]

