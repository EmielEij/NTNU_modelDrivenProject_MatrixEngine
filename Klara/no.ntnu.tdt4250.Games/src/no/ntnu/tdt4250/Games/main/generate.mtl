[comment encoding = UTF-8 /]
[module generate('http:/ntnu.tdt4250/matrixGames')]


[template public generateElement(logic : Logic)]
[comment @main/]
[file (logic.board.boardName + 'Logic.java', false, 'UTF-8')]
import java.util.Scanner;
class [logic.board.boardName + 'Logic'/]
{
	// Attribute declaration	
	private final [logic.board.boardName + 'Rules'/] rules; 
	private final [logic.board.boardName + 'Board'/] board;
	private final [logic.board.boardName + 'Player'/] player1;
	private final [logic.board.boardName + 'Player'/] player2;

	
	public [logic.board.boardName + 'Logic'/]([logic.board.boardName + 'Player'/] p1, [logic.board.boardName + 'Player'/] p2){
		this.player1 = p1;
		this.player2 = p2;
		board = new [logic.board.boardName + 'Board'/]();
		rules = new [logic.board.boardName + 'Rules'/]();
	}


	public void startGame(){
	    Scanner scanner = new Scanner(System.in);
    	[logic.board.boardName + 'Player'/] currentPlayer = player1;

	 while ([true/]) {
      board.displayBoard();
      System.out.println(currentPlayer.getNamePlayer() + "'s turn (" + currentPlayer.getNameSymbol() + ")");
      System.out.print("Enter a column (0-6): ");
      int column;

      try {
        column = scanner.nextInt();
      } catch (Exception e) {
        System.out.println("Invalid input. Please enter a number between 0 and 6.");
        scanner.next(); // Clear invalid input
        continue;
      }

      if (!board.dropPiece(column, currentPlayer.getNameSymbol())) {
        continue; // Retry the current player's turn
      }

      if (rules.checkWinner(board.getBoard(), currentPlayer.getNameSymbol())) {
        board.displayBoard();
        System.out.println("Congratulations, " + currentPlayer.getNamePlayer() + "! You win!");
        break;
      }

      if (rules.isBoardFull(board.getBoard())) {
        board.displayBoard();
        System.out.println("The game is a draw!");
        break;
      }

      // Switch player
      currentPlayer = (currentPlayer == player1) ? player2 : player1;
    }

    scanner.close();
  }

	public static void main(String['[]'/] args) {
	    System.out.println("Welcome to Connect Four!");
	    Scanner scanner = new Scanner(System.in);
	
	    // Get player details
	    System.out.print("Enter Player 1 name: ");
	    String player1Name = scanner.nextLine();
	    System.out.print("Choose a symbol for Player 1: ");
	    char player1Symbol = scanner.nextLine().charAt(0);
	
	    System.out.print("Enter Player 2 name: ");
	    String player2Name = scanner.nextLine();
	    System.out.print("Choose a symbol for Player 2: ");
	    char player2Symbol = scanner.nextLine().charAt(0);
	
	    [logic.board.boardName + 'Player'/] player1 = new [logic.board.boardName + 'Player'/](player1Name, player1Symbol);
	    [logic.board.boardName + 'Player'/] player2 = new [logic.board.boardName + 'Player'/](player2Name, player2Symbol);
	
	    [logic.board.boardName + 'Logic'/] game = new [logic.board.boardName + 'Logic'/](player1, player2);
	    game.startGame();
	  }
	
}
[/file]

[file (logic.board.boardName + 'Rules.java', false, 'UTF-8')]
class [logic.board.boardName + 'Rules'/]
{
	// Attribute declaration	
	private int rows = [logic.board.rows/];
	private int columns = [logic.board.columns/];
	
    public boolean checkWinner(char['[]'/]['[]'/] board, char symbol) {
      for (int i = 0; i < rows; i++) {
      for (int j = 0; j < columns - 3; j++) {
        if (board['[i]'/]['[j]'/] == symbol
            && board['[i]'/]['[j + 1]'/] == symbol
            && board['[i]'/]['[j + 2]'/] == symbol
            && board['[i]'/]['[j + 3]'/] == symbol) {
          return true;
        }
      }
    }

    // Check vertical
    for (int i = 0; i < rows - 3; i++) {
      for (int j = 0; j < columns; j++) {
        if (board['[i]'/]['[j]'/] == symbol
            && board['[i + 1]'/]['[j]'/] == symbol
            && board['[i + 2]'/]['[j]'/] == symbol
            && board['[i + 3]'/]['[j]'/] == symbol) {
          return true;
        }
      }
    }

    // Check diagonal (top-left to bottom-right)
    for (int i = 0; i < rows - 3; i++) {
      for (int j = 0; j < columns - 3; j++) {
        if (board['[i]'/]['[j]'/] == symbol
            && board['[i + 1][j + 1]'/] == symbol
            && board['[i + 2][j + 2]'/] == symbol
            && board['[i + 3][j + 3]'/] == symbol) {
          return true;
        }
      }
    }

    // Check diagonal (bottom-left to top-right)
    for (int i = 3; i < rows; i++) {
      for (int j = 0; j < columns - 3; j++) {
        if (board['[i]'/]['[j]'/] == symbol
            && board['[i - 1][j + 1]'/] == symbol
            && board['[i - 2][j + 2]'/] == symbol
            && board['[i - 3][j + 3]'/] == symbol) {
          return true;
        }
      }
    }

    return false;
  }
    
	public boolean isBoardFull(char['[][]'/] board) {
    for (int j = 0; j < columns; j++) {
      if (board['[0]'/]['[j]'/] == '.') {
        return false;
      }
    }
    return true;
  }
}
[/file]


[file (logic.board.boardName + 'Player.java', false, 'UTF-8')]
class [logic.board.boardName + 'Player'/]
{

	private String playerName;
	private char symbol;

	//Constructor
	[logic.board.boardName + 'Player'/](String n, char s){
	this.playerName = n;
	this.symbol = s;

	}
	public String getNamePlayer(){
		return playerName;
	}
	public char getNameSymbol(){
		return symbol;
	
	}
	
}
[/file]


[file (logic.board.boardName + 'Board.java', false, 'UTF-8')]
class [logic.board.boardName + 'Board'/]
{
	// Attribute declaration	
	private final char ['[]'/]['[]'/] board; 
	private int rows = [logic.board.rows/];
	private int columns = [logic.board.columns/];
	
	//Constructor
	[logic.board.boardName + 'Board'/](){
		board = new char['[0]'/]['[0]'/];
		initializeBoard();
	}
	public void initializeBoard() {
	    for (int i = 0; i < rows; i++) {
	      for (int j = 0; j < columns; j++) {
	        board['[i]'/]['[j]'/] = '.';
	      }
	    }
	  }
	
	 public void displayBoard() {
       	for (char['[]'/] row : board) {
      		for (char cell : row) {
       			 System.out.print(cell + " ");
      		}
      		System.out.println();
    }
    }
	public char['[]'/]['[]'/] getBoard(){
		return board;
	}
    // dopPiece missing
	public boolean dropPiece(int column, char symbol) {
    if (column < 0 || column >= [logic.board.columns/]) {
      System.out.println("Invalid column. Try again.");
      return false;
    }
    for (int i = rows - 1; i >= 0; i--) {
      if (board['[i]'/]['[column]'/] == '.') {
        board['[i]'/]['[column]'/] = symbol;
        return true;
      }
    }
    System.out.println("Column is full. Try a different one.");
    return false;
  }
}
[/file]
[/template]

